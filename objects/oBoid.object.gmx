<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBoid</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Settings
accel = 0.325; // acceleration
spread = 0.225; // force applied to seperate boids
maxSpd = 11; // max speed
imageTurnSpd = 0.5; // image turning speed (between 0-1)

// Choose random color
image_blend = make_color_hsv(random(255),180,200);

// Movement
xSpd = 0;
ySpd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Accelerate
if mouse_check_button(mb_left)
{
xx=mouse_x;
yy=mouse_y;
}
else
{
xx=o_controller.x;
yy=o_controller.y;
}

pDir = point_direction(x,y,xx,yy);
xSpd += lengthdir_x(accel,pDir);
ySpd += lengthdir_y(accel,pDir);

// Avoid other boids
with(oBoid) {
    if id != other.id {
        pDist = point_distance(other.x,other.y,x,y);
        pDir = point_direction(other.x,other.y,x,y);
        force = spread/pDist;
        xSpd += lengthdir_x(force,pDir);
        ySpd += lengthdir_y(force,pDir);
    }
}

// Limit speed
xSpd = min(max(xSpd,-maxSpd),maxSpd);
ySpd = min(max(ySpd,-maxSpd),maxSpd);

// Move position
x += xSpd;
y += ySpd;

// Update image angle
image_angle -= angle_difference(image_angle,point_direction(0,0,xSpd,ySpd))*imageTurnSpd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,12</point>
    <point>18,18</point>
  </PhysicsShapePoints>
</object>
