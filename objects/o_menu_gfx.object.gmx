<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouse_check_button_pressed(mb_left)
{
mouse_click_x=mouse_x;
mouse_click_y=mouse_y;
global.clickTri=true;
}
if !mouse_check_button(mb_left)
{
global.clickTri=false;
}

x=room_width/2;
y=room_height/2;
/*
if distance_to_point(mouse_x,mouse_y)&lt;100
{

      //Creating Emitters
//Creating Emitters
global.pe_Effect1 = part_emitter_create(global.ps);
global.pe_Effect1_copy = part_emitter_create(global.ps);
global.pe_Effect1_copy_copy = part_emitter_create(global.ps);
global.pe_Effect1_copy_copy = part_emitter_create(global.ps);

//Adjusting Emitter positions. Starting Emitter Streams or Bursts.
var xp, yp;
xp = x;
yp = y;
part_emitter_region(global.ps, global.pe_Effect1, xp-8, xp+8, yp-8, yp+8, ps_shape_rectangle, ps_distr_linear);
part_emitter_burst(global.ps, global.pe_Effect1, global.pt_Effect1, 1);
part_emitter_region(global.ps, global.pe_Effect1_copy, xp-8, xp+8, yp-8, yp+8, ps_shape_rectangle, ps_distr_linear);
part_emitter_burst(global.ps, global.pe_Effect1_copy, global.pt_Effect1_copy, 1);
part_emitter_region(global.ps, global.pe_Effect1_copy_copy, xp-8, xp+8, yp-8, yp+8, ps_shape_rectangle, ps_distr_linear);
part_emitter_burst(global.ps, global.pe_Effect1_copy_copy, global.pt_Effect1_copy_copy, 1);
part_emitter_region(global.ps, global.pe_Effect1_copy_copy, xp-8, xp+8, yp-8, yp+8, ps_shape_ellipse, ps_distr_gaussian);
part_emitter_burst(global.ps, global.pe_Effect1_copy_copy, global.pt_Effect1_copy_copy, 1);

}
else
{
part_emitter_destroy_all(global.ps);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if distance_to_point(mouse_x,mouse_y)&lt;100
{
room_goto(r_game1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
mouse_click_x=mouse_x;
mouse_click_y=mouse_y;

global.clickTri=false;

x=room_width/2;
y=room_height/2;


/*
VARIABLES

A- Origins to Mouse
A -Origins to Mouse Click
A2 - Mouse_click to Mouse
B2 - angle origins
B - angle mouse
B - angle mouse click

Colors
c line 1 2 3
box
bg

A - circle 1 2 3
B square 1 2 3

C1 - blocks
C2 - circles
C3 -triangles
+ Size

Powers
Attack
Defense
Speed

RELATIONS for bonuses



*/


//Generated for GMS in Geon FX v0.9.0
//Put this code in Create event

//Creating Particle System
global.ps = part_system_create();
part_system_depth(global.ps, -1);

//Creating Particle Types
//Effect1
global.pt_Effect1 = part_type_create();
part_type_shape(global.pt_Effect1, pt_shape_square);
part_type_size(global.pt_Effect1, 0.10, 0.10, 0, 0.10);
part_type_scale(global.pt_Effect1, 1, 1);
part_type_orientation(global.pt_Effect1, 0, 0, 0, 0, 0);
part_type_color3(global.pt_Effect1, 16777088, color2, color3);
part_type_alpha3(global.pt_Effect1, 1, 0.60, 0.30);
part_type_blend(global.pt_Effect1, 0);
part_type_life(global.pt_Effect1, 10, 10);
part_type_speed(global.pt_Effect1, 2, 8, 2, 1);
part_type_direction(global.pt_Effect1, 0, 360, 10, 5);
part_type_gravity(global.pt_Effect1, 0, 0);

//Effect1_copy
global.pt_Effect1_copy = part_type_create();
part_type_shape(global.pt_Effect1_copy, pt_shape_disk);
part_type_size(global.pt_Effect1_copy, 0.10, 0.10, 0, 0.10);
part_type_scale(global.pt_Effect1_copy, 1, 1);
part_type_orientation(global.pt_Effect1_copy, 0, 0, 0, 0, 0);
part_type_color3(global.pt_Effect1_copy, color3, 16777088, color2);
part_type_alpha3(global.pt_Effect1_copy, 1, 0.60, 0.30);
part_type_blend(global.pt_Effect1_copy, 0);
part_type_life(global.pt_Effect1_copy, 15, 15);
part_type_speed(global.pt_Effect1_copy, 5, 7, 1, 3);
part_type_direction(global.pt_Effect1_copy, 0, 360, 0, 0);
part_type_gravity(global.pt_Effect1_copy, 0, 0);

//Effect1_copy_copy
global.pt_Effect1_copy_copy = part_type_create();
part_type_shape(global.pt_Effect1_copy_copy, pt_shape_ring);
part_type_size(global.pt_Effect1_copy_copy, 0.10, 0.10, 0, 0.10);
part_type_scale(global.pt_Effect1_copy_copy, 1, 1);
part_type_orientation(global.pt_Effect1_copy_copy, 0, 0, 0, 0, 0);
part_type_color3(global.pt_Effect1_copy_copy, color2, color3, 16777088);
part_type_alpha3(global.pt_Effect1_copy_copy, 1, 0.60, 0.30);
part_type_blend(global.pt_Effect1_copy_copy, 0);
part_type_life(global.pt_Effect1_copy_copy, 20, 20);
part_type_speed(global.pt_Effect1_copy_copy, 3, 7, 0.50, 0);
part_type_direction(global.pt_Effect1_copy_copy, 0, 360, 0, 0);
part_type_gravity(global.pt_Effect1_copy_copy, 0, 0);

//Effect1_copy_copy
global.pt_Effect1_copy_copy = part_type_create();
part_type_shape(global.pt_Effect1_copy_copy, pt_shape_pixel);
part_type_size(global.pt_Effect1_copy_copy, 1, 1, 0, 1);
part_type_scale(global.pt_Effect1_copy_copy, 1, 1);
part_type_orientation(global.pt_Effect1_copy_copy, 0, 0, 0, 0, 0);
part_type_color3(global.pt_Effect1_copy_copy, color3, 16777088, color2);
part_type_alpha3(global.pt_Effect1_copy_copy, 1, 0.60, 0.30);
part_type_blend(global.pt_Effect1_copy_copy, 1);
part_type_life(global.pt_Effect1_copy_copy, 25, 25);
part_type_speed(global.pt_Effect1_copy_copy, 5, 5, 1, 10);
part_type_direction(global.pt_Effect1_copy_copy, 0, 360, 0, 0);
part_type_gravity(global.pt_Effect1_copy_copy, 0, 0);

//Creating Emitters
global.pe_Effect1 = part_emitter_create(global.ps);
global.pe_Effect1_copy = part_emitter_create(global.ps);
global.pe_Effect1_copy_copy = part_emitter_create(global.ps);
global.pe_Effect1_copy_copy = part_emitter_create(global.ps);

//Adjusting Emitter positions. Starting Emitter Streams or Bursts.
var xp, yp;
xp = x;
yp = y;
part_emitter_region(global.ps, global.pe_Effect1, xp-8, xp+8, yp-8, yp+8, ps_shape_rectangle, ps_distr_linear);
part_emitter_burst(global.ps, global.pe_Effect1, global.pt_Effect1, 1);
part_emitter_region(global.ps, global.pe_Effect1_copy, xp-8, xp+8, yp-8, yp+8, ps_shape_rectangle, ps_distr_linear);
part_emitter_burst(global.ps, global.pe_Effect1_copy, global.pt_Effect1_copy, 1);
part_emitter_region(global.ps, global.pe_Effect1_copy_copy, xp-8, xp+8, yp-8, yp+8, ps_shape_rectangle, ps_distr_linear);
part_emitter_burst(global.ps, global.pe_Effect1_copy_copy, global.pt_Effect1_copy_copy, 1);
part_emitter_region(global.ps, global.pe_Effect1_copy_copy, xp-8, xp+8, yp-8, yp+8, ps_shape_ellipse, ps_distr_gaussian);
part_emitter_burst(global.ps, global.pe_Effect1_copy_copy, global.pt_Effect1_copy_copy, 1);

alarm[0]=12;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();
if global.clickTri=true
{
//lines
draw_set_alpha(.7); 
draw_line_width_colour(mouse_x,mouse_y,x,y,4,color2,color3);
draw_line_width_colour(mouse_x,mouse_y,mouse_click_x,mouse_click_y,4,color3,color1);
draw_line_width_colour(mouse_click_x,mouse_click_y,x,y,4,color1,color2);



draw_set_alpha(.5); 
draw_line_width_colour(mouse_x-x,mouse_y-y,x,y,4,color2,color3);
draw_line_width_colour(mouse_x,mouse_y,mouse_click_x,mouse_click_y,4,color3,color1);
draw_line_width_colour(mouse_click_x-x,mouse_click_y-y,x,y,4,color1,color2);

draw_set_alpha(.5); 
draw_line_width_colour(mouse_x-x,mouse_y-y,x,y,4,color2,color3);
draw_line_width_colour(mouse_x-x,mouse_y-y,mouse_click_x,mouse_click_y,4,color3,color1);
draw_line_width_colour(mouse_click_x-x,mouse_click_y-y,x,y,4,color1,color2);

draw_set_alpha(.5); 
draw_line_width_colour(mouse_x-x,mouse_y-y,x,y,4,color2,color3);
draw_line_width_colour(mouse_x-x,mouse_y-y,mouse_click_x-x,mouse_click_y-y,4,color3,color1);
draw_line_width_colour(mouse_click_x-x,mouse_click_y-y,x,y,4,color1,color2);

draw_set_alpha(.5); 
draw_line_width_colour(mouse_x-x,mouse_y-y,x,y,4,color2,color3);
draw_line_width_colour(mouse_x-x,mouse_y-y,mouse_click_x-x,mouse_click_y-y,4,color3,color1);
draw_line_width_colour(mouse_click_x,mouse_click_y,x,y,4,color1,color2);



draw_set_alpha(.5); 
draw_line_width_colour(mouse_x+x,mouse_y+y,x,y,4,color2,color3);
draw_line_width_colour(mouse_x+x,mouse_y+y,mouse_click_x,mouse_click_y,4,color3,color1);
draw_line_width_colour(mouse_click_x+x,mouse_click_y+y,x,y,4,color1,color2);

draw_set_alpha(.5); 
draw_line_width_colour(mouse_x+x,mouse_y+y,x,y,4,color2,color3);
draw_line_width_colour(mouse_x+x,mouse_y+y,mouse_click_x+x,mouse_click_y+y,4,color3,color1);
draw_line_width_colour(mouse_click_x+x,mouse_click_y+y,x,y,4,color1,color2);

draw_set_alpha(.5); 
draw_line_width_colour(mouse_x+x,mouse_y+y,x,y,4,color2,color3);
draw_line_width_colour(mouse_x+x,mouse_y+y,mouse_click_x+x,mouse_click_y+y,4,color3,color1);
draw_line_width_colour(mouse_click_x,mouse_click_y,x,y,4,color1,color2);

draw_set_alpha(.5); 
draw_line_width_colour(mouse_x+x,mouse_y+y,x,y,4,color2,color3);
draw_line_width_colour(mouse_x,mouse_y,mouse_click_x,mouse_click_y,4,color3,color1);
draw_line_width_colour(mouse_click_x,mouse_click_y,x,y,4,color1,color2);



//rectangles
draw_set_alpha(.3); 
draw_rectangle_colour
(
x-distance_to_point(mouse_x,mouse_click_y),
y-distance_to_point(x,mouse_click_y),
x+distance_to_point(mouse_click_x,mouse_y),
y+distance_to_point(mouse_click_x,y),
color2,color2,
color2,color2,true
);

draw_rectangle_colour
(
x-distance_to_point(mouse_x,mouse_click_y)/2,
y-distance_to_point(mouse_click_x,y)/2,
x+distance_to_point(x,mouse_click_y)/2,
y+distance_to_point(mouse_click_x,mouse_y)/2,
color3,color3,
color3,color3,true
);






draw_rectangle_colour(x-25,y-25,x+25,y+25,color2,color2,color2,color2,true);

//circles
draw_set_alpha(.4); 
draw_circle_colour( x,y, distance_to_point(mouse_x,mouse_y) ,color1,color3,true);
draw_circle_colour( x,y, distance_to_point(mouse_click_x,mouse_click_y) ,color2,color2,true);
draw_set_alpha(.1); 
draw_circle_colour( x,y, distance_to_point(mouse_click_x,mouse_click_y)-distance_to_point(mouse_x,mouse_y),color1,color1,false);

draw_set_colour(c_white);
//triangles
draw_triangle_colour(x,y,mouse_x,mouse_y,mouse_click_x,mouse_click_y,color2,color3,color1,false);
}



//base HUD
draw_set_alpha(.2);
draw_rectangle_colour(x-400,y-400,x+400,y+400,colorB,colorB,colorB,colorB,false);
draw_rectangle_colour(0,y-150,room_width/2,y+150,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(0,y-150,room_height/2,y+150,c_black,c_black,c_black,c_black,false);


//MENU
draw_set_alpha(.6);
xx=distance_to_point(mouse_x,mouse_x);
yy=distance_to_point(mouse_x,y);
draw_rectangle(x+xx-25,y+yy-25,x+xx+25,y+yy+25,false);
draw_rectangle(x-xx-25,y-yy-25,x-xx+25,y-yy+25,false);

//In Zone
if distance_to_point(mouse_x,mouse_y)&lt;100
{
draw_set_alpha(1);
draw_circle_colour(x,y,distance_to_point(mouse_x,mouse_y),color1,color1,true);
draw_circle_colour(x,y,distance_to_point(mouse_x,mouse_y)/2,color2,color2,true);
draw_circle_colour(x,y,distance_to_point(mouse_x,mouse_y)*2,color3,color3,true);

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
