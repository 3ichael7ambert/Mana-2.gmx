<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x=o_controller.x;
y=o_controller.y;
background_colour[0]=choose(color1,color2,color3,c_white,c_gray,c_black);

globalvar pushScore;
globalvar pushScore2ai;
globalvar pushScore2h;
pushScore=0;
pushScore2ai=room_height/2;
pushScore2h=room_height/2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x=mouse_x;
y=mouse_y;


/*
if instance_exists(o_controller)
{
//var pointDistSpd, pointDistAtk, pointDistDef;
var o_controller.pointDistSpd=point_distance(o_controller.x,o_controller.y,o_controller.mouse_click_x,o_controller.mouse_click_y)/10;
var o_controller.pointDistAtk=point_distance(o_controller.x,o_controller.y,o_controller.mouse_click_x,o_controller.mouse_click_y)/10;
var o_controller.pointDistDef=point_distance(o_controller.x,o_controller.y,o_controller.mouse_click_x,o_controller.mouse_mouse_y)/10;
}
*/

//distM = pd1a;


if pushScore&gt;abs(room_height/2)
{
game_restart();
}
if pushScore2ai&lt;0
{
game_restart();
}
if pushScore2h&lt;0
{
game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//PLAYER
if game=1 || game=4
{
if global.clickTri=true
{
repeat(distance_to_point(mouse_x,mouse_y)/2)
{
var inst_energy = instance_create(random(room_width),o_controller.y+100, o_block);
with (inst_energy)
   {
   inst_energy.spd=10;
   inst_energy.atk=10;
   inst_energy.def=10;

   }
   }
   }
   }
   





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   if game=3 || game=2
   {
   repeat(distance_to_point(mouse_x,mouse_y)/2)
{
var inst_energy = instance_create(o_controller.x,o_controller.y+10, o_block);
with (inst_energy)
   {
   inst_energy.spd=10;
   inst_energy.atk=10;
   inst_energy.def=10;

}
   }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//pushScore
draw_set_color(c_white);
draw_set_alpha(.3);
draw_rectangle(room_width*.95,0,room_width,room_height,false);
draw_rectangle(0,room_height/2,room_width*.05,room_height,false);

draw_set_color(color1);
draw_set_alpha(.6);
//Push Score AI

draw_rectangle(room_width*.95,room_height/2-pushScore2ai,room_width,room_height/2,false);
draw_rectangle(0,room_height/2-pushScore2ai,room_width*.05,room_height/2,false);

draw_set_color(color2);
//Push Score Human
draw_rectangle(room_width*.95,room_height/2,room_width,room_height/2+pushScore2h,false);
draw_rectangle(0,room_height/2,room_width*.05,room_height/2+pushScore2h,false);

draw_set_color(color3);
//Score
draw_set_alpha(1);
draw_rectangle(room_width*.95,room_height/2+pushScore,room_width,room_height/2,false);
draw_rectangle(0,room_height/2+pushScore,room_width*.05,room_height/2,false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if round(o_controller.ver1)=round(o_controller.ver2)
{
draw_set_colour(c_white);
draw_set_alpha(1);
draw_circle(x,y,o_controller.ver1/10,false);
}

//ver math
//1=2
//3=-4
//
//
//
//
//
//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
