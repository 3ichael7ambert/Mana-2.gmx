<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
mouse_click_x=mouse_x;
mouse_click_y=mouse_y;

global.clickTri=false;

x=room_width/2;
y=room_height;


reset_click=0;



//DEBUG
 ver1=distance_to_point(mouse_click_x,mouse_click_y);
 ver2=distance_to_point(mouse_x,mouse_y);
 ver3=angle_difference(ver1,ver2);//same
 ver4=angle_difference(ver2,ver1);//same
 
 ver5=point_direction(x,y,mouse_x,mouse_y);
 ver6=point_direction(x,y,mouse_click_x,mouse_click_y);
  // ver5a=point_direction(x,y,mouse_clicked_x-x,mouse_clicked_y-u);
  
 ver7=point_direction(mouse_x,mouse_y,x,y);
 ver8=point_direction(mouse_x,mouse_y,mouse_click_x,mouse_click_y);
 
 ver9=point_distance(mouse_x,mouse_y,mouse_click_x,mouse_click_y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reset_click-=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouse_check_button_pressed(mb_left)
{
mouse_click_x=mouse_x;
mouse_click_y=mouse_y;
global.clickTri=true;
}
if !mouse_check_button(mb_left)
{
global.clickTri=false;
}

x=room_width/2;
y=room_height-200;

if reset_click&gt;10
{
game_restart();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reset_click+=1;

alarm[9]=12;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();
if global.clickTri=true
{
//lines
draw_set_alpha(.5); 
draw_line_width_colour(mouse_x,mouse_y,x,y,4,color1,color2);
draw_line_width_colour(mouse_x,mouse_y,mouse_click_x,mouse_click_y,4,color2,color3);
draw_line_width_colour(mouse_click_x,mouse_click_y,x,y,4,color3,color1);

//rectangles
draw_set_alpha(.3); 
draw_rectangle_colour
(
x-distance_to_point(mouse_x,mouse_click_y)/2,
y-distance_to_point(x,mouse_click_y)/2,
x+distance_to_point(mouse_click_x,mouse_y)/2,
y+distance_to_point(mouse_click_x,y)/2,
color1,color1,
color1,color1,true
);

draw_rectangle_colour
(
x-distance_to_point(mouse_x,mouse_click_y)/2,
y-distance_to_point(mouse_click_x,y)/2,
x+distance_to_point(x,mouse_click_y)/2,
y+distance_to_point(mouse_click_x,mouse_y)/2,
color2,color2,
color2,color2,true
);






draw_rectangle_colour(x-25,y-25,x+25,y+25,color1,color1,color2,color2,true);

//circles
draw_set_alpha(.4); 
draw_circle_colour( x,y, distance_to_point(mouse_x,mouse_y)/2 ,color3,color2,true);
draw_circle_colour( x,y, distance_to_point(mouse_click_x,mouse_click_y)/2 ,color2,color2,true);
draw_set_alpha(.1); 
draw_circle_colour( x,y, distance_to_point(mouse_click_x,mouse_click_y)/2-distance_to_point(mouse_x,mouse_y)/2,color3,color3,false);

draw_set_colour(c_white);
//triangles
draw_triangle_colour(x,y,mouse_x,mouse_y,mouse_click_x,mouse_click_y,color1,color2,color3,false);
}



//base HUD
draw_set_alpha(.2);
draw_rectangle_colour(x-100,y-100,x+100,y+100,colorB,colorB,colorB,colorB,false);
draw_rectangle_colour(0,y-150,room_width,y+150,c_black,c_black,c_black,c_black,false);




//DEBUG


 ver1=distance_to_point(mouse_click_x,mouse_click_y);
 ver2=distance_to_point(mouse_x,mouse_y);
 ver3=angle_difference(ver7,ver8);//same
 ver4=angle_difference(ver8,ver9);//same
 
 ver5=point_direction(x,y,mouse_x,mouse_y);
 ver6=point_direction(x,y,mouse_click_x,mouse_click_y);
  // ver5a=point_direction(x,y,mouse_clicked_x-x,mouse_clicked_y-u);
  
 ver7=point_direction(mouse_x,mouse_y,x,y);
 ver8=point_direction(mouse_x,mouse_y,mouse_click_x,mouse_click_y);
 
 ver9=point_distance(mouse_click_x,mouse_click_y,x,y,);
 ver10=point_distance(mouse_click_x,mouse_click_y,mouse_x,mouse_y,);
  ver11=angle_difference(ver9,ver10);//same
 ver12=angle_difference(ver10,ver9);//same

 
 draw_set_colour(c_black);
 draw_text(40,40,ver1 );
 draw_text(40,80,ver2 );
 draw_text(40,120,ver3 );
 draw_text(40,160,ver4 );
 draw_text(40,200,ver5 );
 draw_text(40,240,ver6 );
 draw_text(40,280,ver7 );
 draw_text(40,320,ver8 );
 draw_text(40,340,ver9 );
 draw_text(40,360,ver10 );
 draw_text(40,380,ver11 );
 draw_text(40,400,ver12 );
 
 ////////////////////
 /////////////
 ////////
 //////
 ///
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
